import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';

class MapDriverController extends GetxController {
  // inital variable Map
  var startLocation = Rx<LatLng>(const LatLng(0, 0));
  var endLocation = Rx<LatLng>(const LatLng(0, 0));
  var currentLocation =
      Rx<LatLng?>(const LatLng(9.91613239469001, 105.87755169181108));
  final RxList<LatLng> routePoints = <LatLng>[].obs;
  final RxList<LatLng> mainPoints = <LatLng>[].obs;
  final RxList<LatLng> optimizedRoute = <LatLng>[].obs;
  final RxList<double> distances = <double>[].obs;
  final RxList<double> durations = <double>[].obs;
  final RxDouble totalDistance = 0.0.obs;
  final RxDouble totalDuration = 0.0.obs;
  // initial flutter map
  final MapController mapController = MapController();
  // list route
  final List<String> routeAddresses = [
    "Xu√¢n H√≤a, K·∫ø S√°ch, S√≥c TrƒÉng, Vi·ªát Nam",
    "Nam S√¥ng H·∫≠u, K·∫ø S√°ch, S√≥c TrƒÉng, Vi·ªát Nam",
    "Ph·ª•ng Hi·ªáp, H·∫≠u Giang, Vi·ªát Nam",
    "Ph√∫ T√¢n, Ch√¢u Th√†nh, H·∫≠u Giang, Vi·ªát Nam",
  ];
  // Th√™m c√°c th√¥ng s·ªë xe t·∫£i
  final RxDouble truckMaxHeight = 4.0.obs; // Chi·ªÅu cao t·ªëi ƒëa (m)
  final RxDouble truckMaxWeight = 16.0.obs; // Tr·ªçng t·∫£i t·ªëi ƒëa (t·∫•n)
  final RxDouble truckWidth = 2.5.obs; // Chi·ªÅu r·ªông (m)
  final RxBool truckHazardousMaterials = false.obs; // H√†ng nguy hi·ªÉm

  // function initial
  @override
  void onInit() {
    super.onInit();
    //getCurrentLocation();
    //getRoute();
    getOptimizedRoute();
    formatTruckInfo();
  }

  // H√†m c·∫≠p nh·∫≠t th√¥ng s·ªë xe t·∫£i
  void updateTruckSpecs({
    double? maxHeight,
    double? maxWeight,
    double? width,
    bool? hazardousMaterials,
  }) {
    if (maxHeight != null) truckMaxHeight.value = maxHeight;
    if (maxWeight != null) truckMaxWeight.value = maxWeight;
    if (width != null) truckWidth.value = width;
    if (hazardousMaterials != null)
      truckHazardousMaterials.value = hazardousMaterials;

    if (kDebugMode) {
      print('''
      üöõ C·∫≠p nh·∫≠t th√¥ng s·ªë xe t·∫£i:
      - Chi·ªÅu cao: ${truckMaxHeight.value}m
      - Tr·ªçng t·∫£i: ${truckMaxWeight.value}t·∫•n
      - Chi·ªÅu r·ªông: ${truckWidth.value}m
      - H√†ng nguy hi·ªÉm: ${truckHazardousMaterials.value ? 'C√ì' : 'KH√îNG'}
      ''');
    }
  }

  // H√†m l·∫•y th√¥ng s·ªë d·∫°ng Map ƒë·ªÉ g·ª≠i API
  Map<String, dynamic> getTruckParams() {
    return {
      'vehicle_width': truckWidth.value,
      'vehicle_height': truckMaxHeight.value,
      'vehicle_weight': truckMaxWeight.value,
      'hazardous_goods': truckHazardousMaterials.value,
    };
  }

  // move camera to currentLocation
  void moveToCurrentLocation() {
    if (currentLocation.value != null) {
      mapController.move(currentLocation.value!, 15.0);
      if (kDebugMode) {
        print("üìå ƒê√£ di chuy·ªÉn camera ƒë·∫øn v·ªã tr√≠ hi·ªán t·∫°i");
      }
    }
  }

  // get currentLocation
  Future<void> getCurrentLocation() async {
    if (kDebugMode) {
      print("üìç Getting current location...");
    }
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        if (kDebugMode) {
          print("‚ö†Ô∏è Location services are disabled");
        }
        return;
      }
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          if (kDebugMode) {
            print("‚ö†Ô∏è Location permissions are denied");
          }
          return;
        }
      }
      if (permission == LocationPermission.deniedForever) {
        if (kDebugMode) {
          print("‚ö†Ô∏è Location permissions are permanently denied");
        }
        return;
      }
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );
      currentLocation.value = LatLng(position.latitude, position.longitude);
      if (kDebugMode) {
        print("‚úÖ Current location: ${currentLocation.value}");
      }
      // auto move camera new location
      moveToCurrentLocation();
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è Error getting current location: $e");
      }
    }
  }

  // Convert address to coordinates
  Future<List<LatLng>> getCoordinates() async {
    mainPoints.clear();
    List<LatLng> results = [];
    for (var address in routeAddresses) {
      final url = Uri.parse(
          "https://nominatim.openstreetmap.org/search?q=${Uri.encodeComponent(address)}&format=json&addressdetails=1&limit=1");
      try {
        // Send a request to the Nominatim API to convert the address to GPS coordinates.
        final response = await http.get(url,
            headers: {"User-Agent": "YourAppName/1.0 (your@email.com)"});
        if (response.statusCode == 200) {
          final List data = json.decode(response.body);
          if (data.isNotEmpty) {
            final lat = double.tryParse(data[0]["lat"]) ?? 0;
            final lon = double.tryParse(data[0]["lon"]) ?? 0;
            if (lat != 0 && lon != 0) {
              LatLng point = LatLng(lat, lon);
              // save
              results.add(point);
              //save for mainpoints
              mainPoints.add(point);
              if (kDebugMode) {
                print("‚úÖ ƒê√£ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c cho '$address': $lat, $lon");
              }
              continue;
            }
          }
        }
        if (kDebugMode) {
          print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô cho '$address'");
        }
      } catch (e) {
        if (kDebugMode) {
          print("‚ö†Ô∏è L·ªói khi l·∫•y t·ªça ƒë·ªô cho '$address': $e");
        }
      }
    }
    return results;
  }

  Future<void> checkTruckRestrictions(List<LatLng> route) async {
  if (route.length < 2) return;

  if (kDebugMode) print("üöõ ƒêang ki·ªÉm tra h·∫°n ch·∫ø cho xe t·∫£i...");

  for (int i = 0; i < route.length - 1; i++) {
    final start = route[i];
    final end = route[i+1];
    
    final params = getTruckParams();
    final url = Uri.parse(
      "https://router.project-osrm.org/route/v1/truck/"
      "${start.longitude},${start.latitude};"
      "${end.longitude},${end.latitude}"
      "?overview=full&steps=true"
      "&vehicle_width=${params['vehicle_width']}"
      "&vehicle_height=${params['vehicle_height']}"
      "&vehicle_weight=${params['vehicle_weight']}"
      "&hazardous_goods=${params['hazardous_goods']}"
    );

    try {
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
          final routeInfo = data['routes'][0];
          
          if (routeInfo['contains_truck_restrictions'] == true) {
            if (kDebugMode) print("‚ö†Ô∏è ƒêo·∫°n ${i+1} c√≥ h·∫°n ch·∫ø xe t·∫£i");
          }
          
          for (final leg in routeInfo['legs']) {
            for (final step in leg['steps']) {
              if (step['truck_restrictions'] != null) {
                final loc = step['maneuver']['location'];
                if (kDebugMode) {
                  print("üö´ H·∫°n ch·∫ø xe t·∫£i t·∫°i: ${loc[1]},${loc[0]}");
                  print("   Chi ti·∫øt: ${step['truck_restrictions']}");
                }
              }
            }
          }
        }
      }
    } catch (e) {
      if (kDebugMode) print("‚ö†Ô∏è L·ªói khi ki·ªÉm tra h·∫°n ch·∫ø: $e");
    }
  }
}

  // Use OSRM to calculate the actual distance between two points
  Future<double> calculateRoadDistance(LatLng point1, LatLng point2) async {
  final params = getTruckParams();
  final url = Uri.parse(
    "https://router.project-osrm.org/route/v1/truck/"
    "${point1.longitude},${point1.latitude};"
    "${point2.longitude},${point2.latitude}"
    "?overview=false"
    "&vehicle_width=${params['vehicle_width']}"
    "&vehicle_height=${params['vehicle_height']}"
    "&vehicle_weight=${params['vehicle_weight']}"
    "&hazardous_goods=${params['hazardous_goods']}"
  );

  try {
    final response = await http.get(url).timeout(const Duration(seconds: 10));
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
        return data['routes'][0]['distance'].toDouble();
      }
    }
    return 0.0;
  } catch (e) {
    if (kDebugMode) print("‚ö†Ô∏è L·ªói t√≠nh kho·∫£ng c√°ch: $e");
    return 0.0;
  }
}

  // Use greedy algorithm to find shortest route
  Future<List<LatLng>> greedyTSPWithTraffic(
      LatLng start, List<LatLng> points, LatLng end) async {
    List<LatLng> result = [start];
    List<LatLng> unvisited = List.from(points);
    LatLng current = start;

    // average speed by road type km/h
    final roadSpeeds = {
      'motorway': 80.0,
      'trunk': 60.0,
      'primary': 50.0,
      'secondary': 40.0,
      'tertiary': 30.0,
      'unclassified': 20.0,
      'residential': 20.0,
    };
    while (unvisited.isNotEmpty) {
      // Find nearest point based on actual travel time
      int bestIndex = 0;
      double bestTime = double.infinity;
      for (int i = 0; i < unvisited.length; i++) {
        // distance
        final distance = await calculateRoadDistance(current, unvisited[i]);
        // speed
        final speed =
            await estimateRoadSpeed(current, unvisited[i], roadSpeeds);
        final time = distance / (speed * 1000 / 3600); // s
        if (time < bestTime) {
          bestTime = time;
          bestIndex = i;
        }
      }
      current = unvisited[bestIndex];
      result.add(current);
      unvisited.removeAt(bestIndex);
    }
    result.add(end);
    return result;
  }

  // Speed ‚Äã‚Äãestimation function based on road type
  Future<double> estimateRoadSpeed(
      LatLng p1, LatLng p2, Map<String, double> roadSpeeds) async {
    final url = Uri.parse(
        "https://router.project-osrm.org/route/v1/driving/${p1.longitude},${p1.latitude};${p2.longitude},${p2.latitude}?overview=full&steps=true");
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
          double totalWeightedSpeed = 0.0;
          double totalDistance = 0.0;

          // Analyze each road segment
          for (var leg in data['routes'][0]['legs']) {
            for (var step in leg['steps']) {
              final distance = step['distance'].toDouble();
              final roadType = step['name'] ?? 'unclassified';
              final speed = roadSpeeds[roadType.toLowerCase()] ?? 30.0;

              totalWeightedSpeed += speed * distance;
              totalDistance += distance;
            }
          }
          return totalDistance > 0 ? totalWeightedSpeed / totalDistance : 30.0;
        }
      }
      // Default value if data cannot
      return 30.0;
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è L·ªói ∆∞·ªõc t√≠nh t·ªëc ƒë·ªô ƒë∆∞·ªùng b·ªô: $e");
      }
      return 30.0;
    }
  }
  Future<bool> checkInternetConnection() async {
  try {
    final result = await InternetAddress.lookup('google.com');
    return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
  } on SocketException catch (_) {
    return false;
  }
}

  // route optimization with traffic factor
  Future<void> getOptimizedRoute() async {
  if (kDebugMode) {
    print("üîÑ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a tuy·∫øn ƒë∆∞·ªùng cho xe t·∫£i...");
    print(formatTruckInfo());
  }

  // Ki·ªÉm tra k·∫øt n·ªëi Internet
  if (!await checkInternetConnection()) {
    if (kDebugMode) print("‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi Internet");
    return;
  }

  try {
    // L·∫•y t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ
    final waypoints = await getCoordinates();
    if (waypoints.isEmpty) {
      if (kDebugMode) print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ");
      return;
    }

    startLocation.value = currentLocation.value ?? waypoints.first;
    endLocation.value = waypoints.last;

    // S·∫Øp x·∫øp c√°c ƒëi·ªÉm trung gian theo kho·∫£ng c√°ch
    final intermediatePoints = await _sortPointsByRoadDistance(
      startLocation.value, 
      waypoints.sublist(0, waypoints.length - 1)
    );

    if (kDebugMode) {
      print("üìç Th·ª© t·ª± c√°c ƒëi·ªÉm d·ª´ng ƒë√£ t·ªëi ∆∞u:");
      intermediatePoints.asMap().forEach((i, point) {
        print("${i+1}. ${point.latitude}, ${point.longitude}");
      });
    }

    // T·∫°o danh s√°ch ƒëi·ªÉm bao g·ªìm ƒëi·ªÉm ƒë·∫ßu, c√°c ƒëi·ªÉm trung gian v√† ƒëi·ªÉm cu·ªëi
    final fullRoute = [startLocation.value, ...intermediatePoints, endLocation.value];
    
    // L·∫•y tuy·∫øn ƒë∆∞·ªùng t·ª´ OSRM
    await fetchRouteFromOSRM(fullRoute);
    
    // Ki·ªÉm tra c√°c h·∫°n ch·∫ø ƒë∆∞·ªùng b·ªô cho xe t·∫£i
    await checkTruckRestrictions(optimizedRoute);

    if (kDebugMode) print("‚úÖ Ho√†n th√†nh t·ªëi ∆∞u h√≥a tuy·∫øn ƒë∆∞·ªùng");
  } catch (e) {
    if (kDebugMode) print("üî¥ L·ªói trong qu√° tr√¨nh t·ªëi ∆∞u h√≥a: $e");
  }
}

// S·∫Øp x·∫øp c√°c ƒëi·ªÉm theo kho·∫£ng c√°ch ƒë∆∞·ªùng b·ªô th·ª±c t·∫ø
Future<List<LatLng>> _sortPointsByRoadDistance(LatLng start, List<LatLng> points) async {
  final distanceMap = <LatLng, double>{};
  
  // T√≠nh to√°n kho·∫£ng c√°ch ƒë∆∞·ªùng b·ªô cho t·ª´ng ƒëi·ªÉm
  for (final point in points) {
    try {
      distanceMap[point] = await calculateRoadDistance(start, point);
      if (kDebugMode) {
        print("üìê Kho·∫£ng c√°ch t·ª´ ${start.latitude},${start.longitude} "
              "ƒë·∫øn ${point.latitude},${point.longitude}: ${distanceMap[point]?.toStringAsFixed(0)}m");
      }
    } catch (e) {
      if (kDebugMode) print("‚ö†Ô∏è L·ªói t√≠nh kho·∫£ng c√°ch: $e");
      distanceMap[point] = double.infinity;
    }
  }
  
  // S·∫Øp x·∫øp theo kho·∫£ng c√°ch tƒÉng d·∫ßn
  points.sort((a, b) => (distanceMap[a] ?? 0).compareTo(distanceMap[b] ?? 0));
  
  return points;
}

Future<List<LatLng>> sortPointsByDistance(LatLng start, List<LatLng> points) async {
  // T·∫°o map l∆∞u kho·∫£ng c√°ch t·ª´ start ƒë·∫øn t·ª´ng ƒëi·ªÉm
  final distanceMap = <LatLng, double>{};
  
  for (var point in points) {
    distanceMap[point] = await calculateRoadDistance(start, point);
  }
  
  // S·∫Øp x·∫øp theo kho·∫£ng c√°ch tƒÉng d·∫ßn
  points.sort((a, b) => distanceMap[a]!.compareTo(distanceMap[b]!));
  
  return points;
}

  // move camera preview all point
  void fitAllPoints() {
    if (optimizedRoute.isEmpty && currentLocation.value == null) return;
    // create all list need preview
    List<LatLng> allPoints = [];
    if (currentLocation.value != null) {
      allPoints.add(currentLocation.value!);
    }
    allPoints.addAll(optimizedRoute);
    allPoints.addAll(routePoints);
    if (allPoints.isEmpty) return;
    final bounds = LatLngBounds.fromPoints(allPoints);
    // preview all point
    mapController.fitCamera(CameraFit.bounds(
        bounds: bounds, padding: const EdgeInsets.all(50), maxZoom: 16.0));
    if (kDebugMode) {
      print(
          "üó∫Ô∏è ƒê√£ ƒëi·ªÅu ch·ªânh b·∫£n ƒë·ªì hi·ªÉn th·ª• to√†n b·ªô ${allPoints.length} ƒëi·ªÉm");
    }
  }

  // Get route from OSRM
  Future<void> fetchRouteFromOSRM(List<LatLng> points) async {
  if (points.length < 2) {
    if (kDebugMode) print("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 ƒëi·ªÉm ƒë·ªÉ t·∫°o tuy·∫øn ƒë∆∞·ªùng");
    return;
  }

  final waypointsString = points.map((p) => "${p.longitude},${p.latitude}").join(";");
  final params = getTruckParams();
  
  // T·∫°o URL v·ªõi c√°c th√¥ng s·ªë xe t·∫£i
  final url = Uri.parse(
    "https://router.project-osrm.org/route/v1/truck/$waypointsString"
    "?overview=full&geometries=geojson"
    "&alternatives=false"
    "&continue_straight=false"
    "&vehicle_width=${params['vehicle_width']}"
    "&vehicle_height=${params['vehicle_height']}"
    "&vehicle_weight=${params['vehicle_weight']}"
    "&hazardous_goods=${params['hazardous_goods']}"
  );

  if (kDebugMode) print("üåê ƒêang g·ªçi OSRM API: ${url.toString()}");

  final client = http.Client();
  try {
    final response = await client.get(url).timeout(const Duration(seconds: 20));
    
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      if (kDebugMode) print("‚úÖ Nh·∫≠n d·ªØ li·ªáu t·ª´ OSRM: ${data.toString()}");

      if (data['code'] == 'Ok' && data['routes'] != null && data['routes'].isNotEmpty) {
        final route = data['routes'][0];
        
        // C·∫≠p nh·∫≠t c√°c ƒëi·ªÉm tuy·∫øn ƒë∆∞·ªùng
        routePoints.assignAll(
          (route['geometry']['coordinates'] as List)
            .map((coord) => LatLng(coord[1], coord[0]))
            .toList()
        );
        
        // C·∫≠p nh·∫≠t th√¥ng tin kho·∫£ng c√°ch v√† th·ªùi gian
        extractDistanceAndDuration(route['legs'], points);
        optimizedRoute.assignAll(points);
        
        if (kDebugMode) {
          print("üü¢ Tuy·∫øn ƒë∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u th√†nh c√¥ng");
          print("üìè T·ªïng kho·∫£ng c√°ch: ${formatDistance(totalDistance.value)}");
          print("‚è±Ô∏è T·ªïng th·ªùi gian: ${formatDuration(totalDuration.value)}");
        }
        
        // Di chuy·ªÉn b·∫£n ƒë·ªì ƒë·ªÉ hi·ªÉn th·ªã to√†n b·ªô tuy·∫øn ƒë∆∞·ªùng
        WidgetsBinding.instance.addPostFrameCallback((_) {
          fitAllPoints();
        });
      } else {
        if (kDebugMode) print("üî¥ L·ªói t·ª´ OSRM: ${data['message'] ?? 'Unknown error'}");
      }
    } else {
      if (kDebugMode) print("üî¥ L·ªói HTTP: ${response.statusCode}");
      await fetchDrivingRouteFallback(points);
    }
  } catch (e) {
    if (kDebugMode) print("üî¥ L·ªói khi g·ªçi OSRM API: $e");
    // Th·ª≠ fallback v·ªÅ driving profile n·∫øu truck profile kh√¥ng ho·∫°t ƒë·ªông
    
  } finally {
    client.close();
  }
}

// Fallback khi truck profile kh√¥ng ho·∫°t ƒë·ªông
Future<void> fetchDrivingRouteFallback(List<LatLng> points) async {
  if (kDebugMode) print("üîÑ ƒêang th·ª≠ s·ª≠ d·ª•ng driving profile...");
  
  final waypointsString = points.map((p) => "${p.longitude},${p.latitude}").join(";");
  final url = Uri.parse(
    "https://router.project-osrm.org/route/v1/driving/$waypointsString"
    "?overview=full&geometries=geojson"
  );

  try {
    final response = await http.get(url).timeout(const Duration(seconds: 15));
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
        final route = data['routes'][0];
        routePoints.assignAll(
          (route['geometry']['coordinates'] as List)
            .map((coord) => LatLng(coord[1], coord[0]))
            .toList()
        );
        extractDistanceAndDuration(route['legs'], points);
        optimizedRoute.assignAll(points);
        
        if (kDebugMode) print("‚ö†Ô∏è ƒê√£ s·ª≠ d·ª•ng driving profile thay th·∫ø");
      }
    }
  } catch (e) {
    if (kDebugMode) print("üî¥ L·ªói fallback: $e");
  }
}

  //
  void extractDistanceAndDuration(List<dynamic> legs, List<LatLng> points) {
    distances.clear();
    durations.clear();
    totalDistance.value = 0;
    totalDuration.value = 0;

    for (var leg in legs) {
      double distance = (leg['distance'] as num).toDouble(); // m
      double duration = (leg['duration'] as num).toDouble(); // s
      distances.add(distance);
      durations.add(duration);
      totalDistance.value += distance;
      totalDuration.value += duration;
    }

    if (kDebugMode) {
      print(
          "üìä Kho·∫£ng c√°ch c√°c ch·∫∑ng: ${distances.map((d) => (d / 1000).toStringAsFixed(2) + 'km')}");
    }
    if (kDebugMode) {
      print(
          "‚è±Ô∏è Th·ªùi gian c√°c ch·∫∑ng: ${durations.map((d) => (d / 60).toStringAsFixed(2) + ' ph√∫t')}");
    }
    if (kDebugMode) {
      print(
          "üìè T·ªïng kho·∫£ng c√°ch: ${(totalDistance.value / 1000).toStringAsFixed(2)} km");
    }
    if (kDebugMode) {
      print(
          "‚è≥ T·ªïng th·ªùi gian: ${(totalDuration.value / 60).toStringAsFixed(2)} ph√∫t");
    }

    // Ki·ªÉm tra c√°c c·∫£nh b√°o ƒë·∫∑c bi·ªát cho xe t·∫£i
    for (var leg in legs) {
      for (var step in leg['steps']) {
        if (step['truck_restrictions'] != null) {
          print("‚ö†Ô∏è C·∫£nh b√°o xe t·∫£i: ${step['truck_restrictions']}");
        }
        if (step['has_tunnel'] == true) {
          print("üöá ƒêo·∫°n ƒë∆∞·ªùng h·∫ßm - Ki·ªÉm tra chi·ªÅu cao");
        }
        if (step['has_bridge'] == true) {
          print("üåâ ƒêo·∫°n c·∫ßu - Ki·ªÉm tra t·∫£i tr·ªçng");
        }
      }
    }
  }

  // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
  String formatDuration(double seconds) {
    int minutes = (seconds / 60).round();
    if (minutes < 60) {
      return '$minutes ph√∫t';
    } else {
      int hours = minutes ~/ 60;
      int remainingMinutes = minutes % 60;
      return '${hours}h${remainingMinutes}p';
    }
  }

  // H√†m ƒë·ªãnh d·∫°ng kho·∫£ng c√°ch
  String formatDistance(double meters) {
    if (meters < 1000) {
      return '${meters.round()} m';
    } else {
      return '${(meters / 1000).toStringAsFixed(2)} km';
    }
  }

  //
  Future<List<LatLng>> findTruckParking(LatLng location) async {
    final url = Uri.parse("https://overpass-api.de/api/interpreter?"
        "[out:json];"
        "nwr[amenity=truck_parking]"
        "around:5000,${location.latitude},${location.longitude};"
        "out center;");

    final response = await http.get(url);
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return data['elements'].map<LatLng>((element) {
        return LatLng(
          element['lat'] ?? element['center']['lat'],
          element['lon'] ?? element['center']['lon'],
        );
      }).toList();
    }
    return [];
  }

  //
  String formatTruckInfo() {
    return '''
  üöõ Th√¥ng s·ªë xe:
  - Chi·ªÅu cao: ${truckMaxHeight.value}m
  - Tr·ªçng t·∫£i: ${truckMaxWeight.value}t·∫•n
  - Chi·ªÅu r·ªông: ${truckWidth.value}m
  ${truckHazardousMaterials.value ? '‚ö†Ô∏è V·∫≠n chuy·ªÉn h√†ng nguy hi·ªÉm' : ''}
  ''';
  }
}

