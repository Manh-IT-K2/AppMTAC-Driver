import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';

class MapDriverController extends GetxController {

  // inital variable Map
  var startLocation = Rx<LatLng>(const LatLng(0, 0));
  var endLocation = Rx<LatLng>(const LatLng(0, 0));
  var currentLocation = Rx<LatLng?>(const LatLng(9.91613239469001, 105.87755169181108));
  final RxList<LatLng> routePoints = <LatLng>[].obs;
  final RxList<LatLng> mainPoints = <LatLng>[].obs;
  final RxList<LatLng> optimizedRoute = <LatLng>[].obs;
  final RxList<double> distances = <double>[].obs;
  final RxList<double> durations = <double>[].obs;
  final RxDouble totalDistance = 0.0.obs;
  final RxDouble totalDuration = 0.0.obs;
  // initial flutter map
  final MapController mapController = MapController();
  // list route
  final List<String> routeAddresses = [
    "Xu√¢n H√≤a, K·∫ø S√°ch, S√≥c TrƒÉng, Vi·ªát Nam",
    "Nam S√¥ng H·∫≠u, K·∫ø S√°ch, S√≥c TrƒÉng, Vi·ªát Nam",
    "Ph·ª•ng Hi·ªáp, H·∫≠u Giang, Vi·ªát Nam",
    "Ph√∫ T√¢n, Ch√¢u Th√†nh, H·∫≠u Giang, Vi·ªát Nam",
  ];

  // function initial
  @override
  void onInit() {
    super.onInit();
    //getCurrentLocation();
    //getRoute();
    getOptimizedRoute();
  }

  // move camera to currentLocation
  void moveToCurrentLocation() {
    if (currentLocation.value != null) {
      mapController.move(currentLocation.value!, 15.0);
      if (kDebugMode) {
        print("üìå ƒê√£ di chuy·ªÉn camera ƒë·∫øn v·ªã tr√≠ hi·ªán t·∫°i");
      }
    }
  }

  // get currentLocation
  Future<void> getCurrentLocation() async {
    if (kDebugMode) {
      print("üìç Getting current location...");
    }
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        if (kDebugMode) {
          print("‚ö†Ô∏è Location services are disabled");
        }
        return;
      }
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          if (kDebugMode) {
            print("‚ö†Ô∏è Location permissions are denied");
          }
          return;
        }
      }
      if (permission == LocationPermission.deniedForever) {
        if (kDebugMode) {
          print("‚ö†Ô∏è Location permissions are permanently denied");
        }
        return;
      }
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );
      currentLocation.value = LatLng(position.latitude, position.longitude);
      if (kDebugMode) {
        print("‚úÖ Current location: ${currentLocation.value}");
      }
      // auto move camera new location
      moveToCurrentLocation();
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è Error getting current location: $e");
      }
    }
  }

  // Convert address to coordinates
  Future<List<LatLng>> getCoordinates() async {
    mainPoints.clear();
    List<LatLng> results = [];
    for (var address in routeAddresses) {
      final url = Uri.parse(
          "https://nominatim.openstreetmap.org/search?q=${Uri.encodeComponent(address)}&format=json&addressdetails=1&limit=1");
      try {
        // Send a request to the Nominatim API to convert the address to GPS coordinates.
        final response = await http.get(url,
            headers: {"User-Agent": "YourAppName/1.0 (your@email.com)"});
        if (response.statusCode == 200) {
          final List data = json.decode(response.body);
          if (data.isNotEmpty) {
            final lat = double.tryParse(data[0]["lat"]) ?? 0;
            final lon = double.tryParse(data[0]["lon"]) ?? 0;
            if (lat != 0 && lon != 0) {
              LatLng point = LatLng(lat, lon);
              // save
              results.add(point);
              //save for mainpoints
              mainPoints.add(point);
              if (kDebugMode) {
                print("‚úÖ ƒê√£ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c cho '$address': $lat, $lon");
              }
              continue;
            }
          }
        }
        if (kDebugMode) {
          print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô cho '$address'");
        }
      } catch (e) {
        if (kDebugMode) {
          print("‚ö†Ô∏è L·ªói khi l·∫•y t·ªça ƒë·ªô cho '$address': $e");
        }
      }
    }
    return results;
  }

  // Use OSRM to calculate the actual distance between two points
  Future<double> calculateRoadDistance(LatLng point1, LatLng point2) async {
    final url = Uri.parse(
        "https://router.project-osrm.org/route/v1/driving/${point1.longitude},${point1.latitude};${point2.longitude},${point2.latitude}?overview=false");

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
          return data['routes'][0]['distance'].toDouble(); //m
        }
      }
      return 0.0;
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è L·ªói t√≠nh kho·∫£ng c√°ch ƒë∆∞·ªùng b·ªô: $e");
      }
      return 0.0;
    }
  }

  // Use greedy algorithm to find shortest route
  Future<List<LatLng>> greedyTSPWithTraffic(LatLng start, List<LatLng> points, LatLng end) async {
    List<LatLng> result = [start];
    List<LatLng> unvisited = List.from(points);
    LatLng current = start;

    // average speed by road type km/h
    final roadSpeeds = {
      'motorway': 80.0, 
      'trunk': 60.0,
      'primary': 50.0,
      'secondary': 40.0,
      'tertiary': 30.0,
      'unclassified': 20.0,
      'residential': 20.0,
    };
    while (unvisited.isNotEmpty) {
      // Find nearest point based on actual travel time
      int bestIndex = 0;
      double bestTime = double.infinity;
      for (int i = 0; i < unvisited.length; i++) {
        // distance
        final distance = await calculateRoadDistance(current, unvisited[i]);
        // speed
        final speed = await estimateRoadSpeed(current, unvisited[i], roadSpeeds);
        final time = distance / (speed * 1000 / 3600); // s
        if (time < bestTime) {
          bestTime = time;
          bestIndex = i;
        }
      }
      current = unvisited[bestIndex];
      result.add(current);
      unvisited.removeAt(bestIndex);
    }
    result.add(end);
    return result;
  }

  // Speed ‚Äã‚Äãestimation function based on road type
  Future<double> estimateRoadSpeed(
      LatLng p1, LatLng p2, Map<String, double> roadSpeeds) async {
    final url = Uri.parse(
        "https://router.project-osrm.org/route/v1/driving/${p1.longitude},${p1.latitude};${p2.longitude},${p2.latitude}?overview=full&steps=true");
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
          double totalWeightedSpeed = 0.0;
          double totalDistance = 0.0;

          // Analyze each road segment
          for (var leg in data['routes'][0]['legs']) {
            for (var step in leg['steps']) {
              final distance = step['distance'].toDouble();
              final roadType = step['name'] ?? 'unclassified';
              final speed = roadSpeeds[roadType.toLowerCase()] ?? 30.0;

              totalWeightedSpeed += speed * distance;
              totalDistance += distance;
            }
          }
          return totalDistance > 0 ? totalWeightedSpeed / totalDistance : 30.0;
        }
      }
      // Default value if data cannot
      return 30.0;
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è L·ªói ∆∞·ªõc t√≠nh t·ªëc ƒë·ªô ƒë∆∞·ªùng b·ªô: $e");
      }
      return 30.0;
    }
  }

  // route optimization with traffic factor
  Future<void> getOptimizedRoute() async {
    if (kDebugMode) {
      print("üîÑ ƒêang t·ªëi ∆∞u h√≥a tuy·∫øn ƒë∆∞·ªùng v·ªõi y·∫øu t·ªë giao th√¥ng...");
    }
    List<LatLng> waypoints = await getCoordinates();
    if (waypoints.isEmpty) {
      if (kDebugMode) {
        print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ!");
      }
      return;
    }
    startLocation.value = currentLocation.value ?? waypoints.first;
    endLocation.value = waypoints.last;
    List<LatLng> intermediatePoints =
        waypoints.sublist(0, waypoints.length - 1);

    // Using greedy algorithm
    List<LatLng> optimizedOrder = await greedyTSPWithTraffic(
        startLocation.value, intermediatePoints, endLocation.value);

    if (kDebugMode) {
      print("üîÄ Th·ª© t·ª± t·ªëi ∆∞u v·ªõi giao th√¥ng: ${optimizedOrder.map((p) => "${p.latitude},${p.longitude}").join(" ‚Üí ")}");
    }
    await fetchRouteFromOSRM(optimizedOrder);
  }

  // move camera preview all point
  void fitAllPoints() {
    if (optimizedRoute.isEmpty && currentLocation.value == null) return;
    // create all list need preview
    List<LatLng> allPoints = [];
    if (currentLocation.value != null) {
      allPoints.add(currentLocation.value!);
    }
    allPoints.addAll(optimizedRoute);
    allPoints.addAll(routePoints);
    if (allPoints.isEmpty) return;
    final bounds = LatLngBounds.fromPoints(allPoints);
    // preview all point
    mapController.fitCamera(CameraFit.bounds(
        bounds: bounds, padding: const EdgeInsets.all(50), maxZoom: 16.0));
    if (kDebugMode) {
      print("üó∫Ô∏è ƒê√£ ƒëi·ªÅu ch·ªânh b·∫£n ƒë·ªì hi·ªÉn th·ª• to√†n b·ªô ${allPoints.length} ƒëi·ªÉm");
    }
  }

  // Get route from OSRM
  Future<void> fetchRouteFromOSRM(List<LatLng> points) async {
    String waypointsString = points
        .map((latLng) => "${latLng.longitude},${latLng.latitude}")
        .join(";");
    final url = Uri.parse(
        "https://router.project-osrm.org/route/v1/driving/$waypointsString?overview=full&geometries=geojson");
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['code'] == 'Ok' && data['routes'].isNotEmpty) {
          final route = data['routes'][0];
          final coordinates = route['geometry']['coordinates'];

          // update route
          routePoints.clear();
          for (var coord in coordinates) {
            routePoints.add(LatLng(coord[1], coord[0]));
          }
          // get distance and time
          extractDistanceAndDuration(route['legs'], points);
          // Save optimized points
          optimizedRoute.assignAll(points);
          if (kDebugMode) {
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tuy·∫øn ƒë∆∞·ªùng t·ªëi ∆∞u");
          }
          moveToCurrentLocation();
        }
        // await map render
        await Future.delayed(const Duration(milliseconds: 300));
        fitAllPoints();
      }
    } catch (e) {
      if (kDebugMode) {
        print("‚ö†Ô∏è L·ªói khi l·∫•y tuy·∫øn ƒë∆∞·ªùng: $e");
      }
    }
  }

  void extractDistanceAndDuration(List<dynamic> legs, List<LatLng> points) {
    distances.clear();
    durations.clear();
    totalDistance.value = 0;
    totalDuration.value = 0;

    for (var leg in legs) {
      double distance = (leg['distance'] as num).toDouble(); // m
      double duration = (leg['duration'] as num).toDouble(); // s
      distances.add(distance);
      durations.add(duration);
      totalDistance.value += distance;
      totalDuration.value += duration;
    }

    if (kDebugMode) {
      print("üìä Kho·∫£ng c√°ch c√°c ch·∫∑ng: ${distances.map((d) => (d / 1000).toStringAsFixed(2) + 'km')}");
    }
    if (kDebugMode) {
      print("‚è±Ô∏è Th·ªùi gian c√°c ch·∫∑ng: ${durations.map((d) => (d / 60).toStringAsFixed(2) + ' ph√∫t')}");
    }
    if (kDebugMode) {
      print("üìè T·ªïng kho·∫£ng c√°ch: ${(totalDistance.value / 1000).toStringAsFixed(2)} km");
    }
    if (kDebugMode) {
      print("‚è≥ T·ªïng th·ªùi gian: ${(totalDuration.value / 60).toStringAsFixed(2)} ph√∫t");
    }
  }

  // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
  String formatDuration(double seconds) {
    int minutes = (seconds / 60).round();
    if (minutes < 60) {
      return '$minutes ph√∫t';
    } else {
      int hours = minutes ~/ 60;
      int remainingMinutes = minutes % 60;
      return '${hours}h${remainingMinutes}p';
    }
  }

  // H√†m ƒë·ªãnh d·∫°ng kho·∫£ng c√°ch
  String formatDistance(double meters) {
    if (meters < 1000) {
      return '${meters.round()} m';
    } else {
      return '${(meters / 1000).toStringAsFixed(2)} km';
    }
  }
}
